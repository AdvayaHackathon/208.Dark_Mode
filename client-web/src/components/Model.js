/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 assets/models/67f6e328d83bca24ef0c4af8.glb -o components/Model.tsx 
*/

import { API_URL } from '@/api';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { useFrame, useGraph } from '@react-three/fiber';
import { useControls } from 'leva';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import * as THREE from 'three';
import { GLTF, SkeletonUtils } from 'three-stdlib';
// import modelPath from '~/assets/models/guide.glb';

const modelPath = "/guide1.glb";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

const visValues = Object.values(corresponding);


export function Model({ fileCode, mouthTalk, playAudio }) {
  const { scene } = useGLTF(modelPath);
  const modelRef = useRef();
  const [blink, setBlink] = useState(false);
  const audio = useMemo(() => {
    if (fileCode) {
      return new Audio(`${API_URL}/audio/${fileCode}.mp3`)
    }
    return null;
  }, [fileCode]);
  const [ani, setAni] = useState("idle");
  useEffect(() => {
    if (fileCode && audio && playAudio) {
      audio?.play();
      audio.onended = (_) => { setAni("idle") };
      setAni("talk");
    } else {
      audio?.pause();
    }
  }, [audio, fileCode, playAudio]);
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { animations: idleAnimations } = useFBX("/Idle.fbx");
  const { animations: talkingAnimations } = useFBX("/Talking.fbx");
  idleAnimations[0].name = "idle";
  talkingAnimations[0].name = "talk";
  const { actions } = useAnimations([idleAnimations[0], talkingAnimations[0]], modelRef);
  useEffect(() => {
    actions[ani]?.reset().play();
    return () => actions[ani]?.fadeOut(0.5);
  }, [ani, actions]);
  useEffect(() => {
    const tempId = setInterval(() => {
      nodes.EyeLeft.morphTargetInfluences[nodes.EyeLeft.morphTargetDictionary["eyeBlinkLeft"]] = 1;
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyeBlinkLeft"]] = 1;
      nodes.EyeRight.morphTargetInfluences[nodes.EyeRight.morphTargetDictionary["eyeBlinkRight"]] = 1;
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyeBlinkRight"]] = 1;
      setTimeout(() => {
        nodes.EyeLeft.morphTargetInfluences[nodes.EyeLeft.morphTargetDictionary["eyeBlinkLeft"]] = 0;
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyeBlinkLeft"]] = 0;
        nodes.EyeRight.morphTargetInfluences[nodes.EyeRight.morphTargetDictionary["eyeBlinkRight"]] = 0;
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyeBlinkRight"]] = 0;
      }, Math.floor(Math.random() * 150) + 100);
    },
      Math.floor(Math.random() * 3000) + 1000);
    return () => clearInterval(tempId);
  }, []);
  useFrame(() => {
    // console.log(fileCode, mouthTalk);
    if (!mouthTalk || !audio) {
      return;
    }
    if (audio.ended || audio.paused) {
      setAni("idle");
      return;
    }
    const curMouthTime = audio?.currentTime;
    if (!curMouthTime) {
      return;
    }
    for (let i = 0; i < visValues.length; i++) {
      const val = visValues[i];
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[val]] = 0;
      nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[val]] = 0;
    }
    for (let i = 0; i < mouthTalk.mouthCues.length; i++) {
      const mouthCue = mouthTalk.mouthCues[i];
      if (curMouthTime >= mouthCue.start && curMouthTime <= mouthCue.end) {
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]] = 1;
        nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]] = 1;
        break;
      }
    }
  });
  return (
    <group ref={modelRef} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload(modelPath);
